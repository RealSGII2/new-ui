@import './defaultThemes/default';

$color-amount: 10%;
$transparent-amount--hover: 0.9;
$transparent-amount--active: 0.7;

@function theme($map, $keys...) {
    @each $key in $keys {
        $map: map-get($map, $key);
    }
    @return $map;
}

@function light($color) {
  @return lightness($color) > 65;
}

@mixin button-background($color) {
    background-color: $color;
    border-color: $color;

    @if (light($color)) {
      color: #000000;
    } @else {
      color: #ffffff;
    }
}

@mixin button-text($button-color) {
  color: $button-color;
  background-color: transparent;
  border-color: transparent;

  &:hover {
    background-color: transparentize($button-color, $transparent-amount--hover);
    border-color: transparentize($button-color, $transparent-amount--hover);
  }

  &:active {
    background-color: transparentize($button-color, $transparent-amount--active);
    border-color: transparentize($button-color, $transparent-amount--active);
  }
}

@mixin button-stroked($button-color) {
  color: $button-color;
  background-color: transparent;
  border-color: $button-color;

  &:hover {
    $transparent-amount: 0.8;
    background-color: transparentize($button-color, $transparent-amount--hover);
  }

  &:active {
    $transparent-amount: 0.6;
    background-color: transparentize($button-color, $transparent-amount--active);
  }
}

@mixin button-filled($button-color) {
  @include button-background($button-color);

  &:hover {
    @include button-background(lighten($button-color, $color-amount));
  }

  &:active {
    @include button-background(darken($button-color, $color-amount));
  }
}

@mixin button-color($button-color) {
  &--text {
    @include button-text($button-color);
  }

  &--stroked {
    @include button-stroked($button-color);
  }

  &--filled {
    @include button-filled($button-color);
  }
}

@mixin button-color-toolbar($button-color) {
  &--text {
    .new-ui.new-button {@include button-text($button-color);}
  }

  &--stroked {
    .new-ui.new-button {@include button-stroked($button-color);}
  }

  &--filled {
    .new-ui.new-button {@include button-filled($button-color);}
  }
}

@mixin themable($name, $package) {
     $button-border-radius: theme($package, 'layout', 'borders', 'radius', 'base');

     .new-ui {
       outline: none;
     }

     .new-ui.elevated:not(.new-button--appearance__outline):not(.new-button--appearance__text) {
       box-shadow: 0px theme($package, 'layout', 'elevation', 'base', 'distance') theme($package, 'layout', 'elevation', 'base', 'blur') theme($package, 'layout', 'elevation', 'color');
     }

     .new-ui.new-button {
       transition: theme($package, 'elements', 'button', 'transition-time');
       border-radius: $button-border-radius;
       padding: theme($package, 'layout', 'padding', 'button');
       border-width: theme($package, 'layout', 'borders', 'thickness', 'base');
       border-style: solid;
       min-width: 50px;

       // Apply shape
       &--pill {
         border-radius: theme($package, 'layout', 'borders', 'radius', 'round');
       }

       &--tile {
         border-radius: theme($package, 'layout', 'borders', 'radius', 'tile');
       }

       // Apply padding
       &--expanded {
         padding: theme($package, 'layout', 'padding', 'button-expanded');
       }

       // Set color
       &--default {
         @include button-color(theme($package, 'colors', 'default'));
       }

       &--brand {
         @include button-color(theme($package, 'colors', 'brand'));
       }

       &--accent {
         @include button-color(theme($package, 'colors', 'accent'));
       }

       &--error {
         @include button-color(theme($package, 'colors', 'states', 'error'));
       }

       &--warn {
         @include button-color(theme($package, 'colors', 'states', 'warn'));
       }

       &--success {
         @include button-color(theme($package, 'colors', 'states', 'success'));
       }

       &--info {
         @include button-color(theme($package, 'colors', 'states', 'info'));
       }
     }

     .new-ui.new-button-toolbar {
       &--default {
         @include button-color-toolbar(theme($package, 'colors', 'default'));
       }

       &--brand {
         @include button-color-toolbar(theme($package, 'colors', 'brand'));
       }

       &--accent {
         @include button-color-toolbar(theme($package, 'colors', 'accent'));
       }

       &--error {
         @include button-color-toolbar(theme($package, 'colors', 'states', 'error'));
       }

       &--warn {
         @include button-color-toolbar(theme($package, 'colors', 'states', 'warn'));
       }

       &--success {
         @include button-color-toolbar(theme($package, 'colors', 'states', 'success'));
       }

       &--info {
         @include button-color-toolbar(theme($package, 'colors', 'states', 'info'));
       }

       &:not(.pill) {
         .new-ui.new-button {
           margin: 0px;
           display: inline-block;
           border-radius: 0px;

           &:first-child {
             border-radius: $button-border-radius 0 0 $button-border-radius !important;
           }

           &:last-child {
             border-radius: 0 $button-border-radius $button-border-radius 0 !important;
           }
         }
       }

       &.pill {
         .new-ui.new-button {
           margin: 0px;
           display: inline-block;
           border-radius: 0px;

           &:first-child {
             border-radius: $button-border-radius 0 0 $button-border-radius !important;
           }

           &:last-child {
             border-radius: 0 $button-border-radius $button-border-radius 0 !important;
           }
         }
       }
     }
}

.new-ui.new-app.new-app--themeable.new-app--use_styles {}

@include themable(default, $theme-package);
