@import './defaultThemes/default';

@function theme($map, $keys...) {
    @each $key in $keys {
        $map: map-get($map, $key);
    }
    @return $map;
}

@function light($color) {
  @return lightness($color) > 50;
}

@mixin button-background($color) {
    background-color: $color;

    @if (light($color)) {
      color: #000000;
    } @else {
      color: #ffffff;
    }
}

@mixin button-color($button-color) {
  $color-amount: 10%;
  $transparent-amount--hover: 0.8;
  $transparent-amount--active: 0.6;
  &--text {
    color: $button-color;
    background-color: transparent;
    border-color: transparent;

    &:hover {
      background-color: transparentize($button-color, $transparent-amount--hover);
      border-color: transparentize($button-color, $transparent-amount--hover);
    }

    &:active {
      background-color: transparentize($button-color, $transparent-amount--active);
      border-color: transparentize($button-color, $transparent-amount--active);
    }
  }

  &--stroked {
    color: $button-color;
    background-color: transparent;
    border-color: $button-color;

    &:hover {
      $transparent-amount: 0.8;
      background-color: transparentize($button-color, $transparent-amount--hover);
    }

    &:active {
      $transparent-amount: 0.6;
      background-color: transparentize($button-color, $transparent-amount--active);
    }
  }

  &--filled {
    @include button-background($button-color);

    &:hover {
      @include button-background(lighten($button-color, $color-amount));
    }

    &:active {
      @include button-background(darken($button-color, $color-amount));
    }
  }
}

@mixin themable($name, $package) {
     .new-ui {
       outline: none;
     }

     .new-ui.elevated:not(.new-button--appearance__outline):not(.new-button--appearance__text) {
       box-shadow: 0px theme($package, 'layout', 'elevation', 'base', 'blur') 0 theme($package, 'layout', 'elevation', 'color');
     }

     .new-ui.new-button {
       transition: theme($package, 'elements', 'buttons', 'transition-time');
       border-radius: theme($package, 'layout', 'borders', 'radius', 'base');
       padding: theme($package, 'layout', 'padding', 'button');
       border-width: theme($package, 'layout', 'borders', 'thickness', 'base');
       border-style: solid;
       min-width: 50px;

       // Apply shape
       &--pill {
         border-radius: theme($package, 'layout', 'borders', 'radius', 'round');
       }

       &--tile {
         border-radius: theme($package, 'layout', 'borders', 'radius', 'tile');
       }

       // Apply padding
       &--expanded {
         padding: theme($package, 'layout', 'padding', 'button-expanded');
       }

       // Set color
       &--default {
         @include button-color(theme($package, 'colors', 'default'));
       }

       &--brand {
         @include button-color(theme($package, 'colors', 'brand'));
       }

       &--accent {
         @include button-color(theme($package, 'colors', 'accent'));
       }

       &--error {
         @include button-color(theme($package, 'colors', 'states', 'error'));
       }

       &--warn {
         @include button-color(theme($package, 'colors', 'states', 'warn'));
       }

       &--success {
         @include button-color(theme($package, 'colors', 'states', 'success'));
       }

       &--info {
         @include button-color(theme($package, 'colors', 'states', 'info'));
       }
     }
}

.new-ui.new-app.new-app--themeable.new-app--use_styles {}

@include themable(default, $theme-package);
